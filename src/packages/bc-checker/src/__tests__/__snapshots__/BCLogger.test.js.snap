// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`matches expected output: empty-block.txt 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
# <BREAKING-CHANGES-LOG>
# </BREAKING-CHANGES-LOG>

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
# <BREAKING-CHANGES-LOG>
# </BREAKING-CHANGES-LOG>
`;

exports[`matches expected output: empty-block.txt 2`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
# <BREAKING-CHANGES-LOG>
# </BREAKING-CHANGES-LOG>

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
# <BREAKING-CHANGES-LOG>
#  append: this
#  and append: also this
# </BREAKING-CHANGES-LOG>
`;

exports[`matches expected output: full-block.txt 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
# <BREAKING-CHANGES-LOG>
#  FIELD_REMOVED: Booking.unstable_baggage was removed.
#  FIELD_REMOVED: BookingOneWay.unstable_baggage was removed.
#  FIELD_REMOVED: BookingInterface.unstable_baggage was removed.
#  FIELD_REMOVED: BookingReturn.unstable_baggage was removed.
#  FIELD_REMOVED: BookingMulticity.unstable_baggage was removed.
# </BREAKING-CHANGES-LOG>

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
# <BREAKING-CHANGES-LOG>
#  FIELD_REMOVED: Booking.unstable_baggage was removed.
#  FIELD_REMOVED: BookingOneWay.unstable_baggage was removed.
#  FIELD_REMOVED: BookingInterface.unstable_baggage was removed.
#  FIELD_REMOVED: BookingReturn.unstable_baggage was removed.
#  FIELD_REMOVED: BookingMulticity.unstable_baggage was removed.
# </BREAKING-CHANGES-LOG>
`;

exports[`matches expected output: full-block.txt 2`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
# <BREAKING-CHANGES-LOG>
#  FIELD_REMOVED: Booking.unstable_baggage was removed.
#  FIELD_REMOVED: BookingOneWay.unstable_baggage was removed.
#  FIELD_REMOVED: BookingInterface.unstable_baggage was removed.
#  FIELD_REMOVED: BookingReturn.unstable_baggage was removed.
#  FIELD_REMOVED: BookingMulticity.unstable_baggage was removed.
# </BREAKING-CHANGES-LOG>

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
# <BREAKING-CHANGES-LOG>
#  FIELD_REMOVED: Booking.unstable_baggage was removed.
#  FIELD_REMOVED: BookingOneWay.unstable_baggage was removed.
#  FIELD_REMOVED: BookingInterface.unstable_baggage was removed.
#  FIELD_REMOVED: BookingReturn.unstable_baggage was removed.
#  FIELD_REMOVED: BookingMulticity.unstable_baggage was removed.
#  append: this
#  and append: also this
# </BREAKING-CHANGES-LOG>
`;

exports[`matches expected output: missing-block.txt 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
# <BREAKING-CHANGES-LOG>
# </BREAKING-CHANGES-LOG>
`;

exports[`matches expected output: missing-block.txt 2`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
# <BREAKING-CHANGES-LOG>
#  append: this
#  and append: also this
# </BREAKING-CHANGES-LOG>
`;

exports[`prints error messages when the schema is manually polluted 1`] = `"Manual changes of GraphQL snapshot detected. Please do not update GraphQL snapshot manually. This file is being autogenerated."`;

exports[`prints error messages when there are breaking changes 1`] = `"You introduced breaking changes into the public GraphQL schema. This change may or may not be intentional. These breaking changes may break some clients consuming our public API. Please try to find a way how to avoid breaking changes and try it again. Here is list of all breaking changes:"`;

exports[`prints error messages when there are breaking changes 2`] = `
"Tips how to avoid breaking changes:

- field removal/modification (introduce new field and only deprecate the old one)
- type removal/modification (just deprecate it and leave it there)
- removal from enum/union (introduce new enum/union)
- arguments removal/modification (introduce new query or graph node)
- change non-nullable -> nullable (just don't do it or introduce new field)
- change of default argument value (don't or introduce new argument/query)"
`;

exports[`prints success message when there are no breaking changes 1`] = `"Congratulations! NO BREAKING CHANGES or OUTDATED SCHEMA. Good job!"`;

exports[`prints warning and updates the schema when backward compatible changes detected 1`] = `
"# @generated SignedSource<<61fe9f8962efaadd944e6177e2a87d3f>>

# <BREAKING-CHANGES-LOG>
# </BREAKING-CHANGES-LOG>

schema {
  query: RootQuery
}

type RootQuery {
  test: Test
  test2: Test2
}

type Test {
  id: String
}

type Test2 {
  id: String
}
"
`;

exports[`prints warning and updates the schema when backward compatible changes detected 2`] = `
Array [
  "GraphQL schema snapshot IS OUTDATED! (updating automatically)",
  "Snapshot of the GraphQL schema successfully created! In case you see this message in CI you have to run locally command \`yarn test-bc\` and commit the changes.",
]
`;
