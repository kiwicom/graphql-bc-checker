// @flow

import { findBreakingChanges, buildSchema, printSchema } from 'graphql';
import SignedSource from '@kiwicom/signed-source';
import path from 'path';
import fs from 'fs';

import schema from '../../../Schema';
import paths from '../../../../paths';
import { printChanges, note, success, warning, error } from './Printer';

const snapshotLocation = path.join(
  paths.scripts,
  'graphql-schema-snapshot.graphql',
);

const args = process.argv.splice(2);
const flagAllowBreakingChanges =
  args.includes('--allow-breaking-changes') ?? false;

const breakingChangeMarkerStart = '<BREAKING-CHANGES-LOG>';
const breakingChangeMarkerEnd = '</BREAKING-CHANGES-LOG>';

const breakingChangeBlockRegExp = new RegExp(
  '# ' + breakingChangeMarkerStart + '([\\s\\S]+)# ' + breakingChangeMarkerEnd,
);

const terminate = (cb?: () => void = () => {}) => {
  cb();
  process.exit(1);
};

(async () => {
  const oldSchema = buildSchema(fs.readFileSync(snapshotLocation).toString());
  const newSchema = schema;

  let newLog = null;

  const changes = findBreakingChanges(oldSchema, newSchema);
  if (changes.length > 0) {
    printChanges(changes);

    newLog = changes.reduce(
      (acc, curVal) =>
        acc + '#  ' + curVal.type + ': ' + curVal.description + '\n',
      '',
    );

    if (flagAllowBreakingChanges === false) {
      terminate();
    }
  }

  const oldSnapshot = fs.readFileSync(snapshotLocation, { encoding: 'utf-8' });
  const match = oldSnapshot.match(breakingChangeBlockRegExp);
  let breakingChangesLog = match === null ? '' : match[1];

  if (newLog) {
    breakingChangesLog += newLog;
  }

  const breakingChangesBlock =
    '# ' +
    breakingChangeMarkerStart +
    breakingChangesLog +
    '# ' +
    breakingChangeMarkerEnd;

  const newSnapshot = SignedSource.signFile(
    `# ${SignedSource.getSigningToken()}\n\n${breakingChangesBlock}\n\n${printSchema(
      schema,
    )}`,
  );

  if (!SignedSource.verifySignature(oldSnapshot)) {
    terminate(
      error(
        `\nManual changes of GraphQL snapshot detected. Please do not update GraphQL snapshot manually. This file is being autogenerated.\n`,
      ),
    );
  }

  if (newSnapshot !== oldSnapshot) {
    warning(`\nGraphQL schema snapshot IS OUTDATED! (updating automatically)`);
    fs.writeFileSync(snapshotLocation, newSnapshot);

    // this is also considered failure so CI will fail (must be committed manually)
    terminate(
      note(
        'Snapshot of the GraphQL schema successfully created! Now please commit it...\n',
      ),
    );
  } else {
    success(
      '\nCongratulations! NO BREAKING CHANGES or OUTDATED SCHEMA. Good job!\n',
    );
  }
})();
