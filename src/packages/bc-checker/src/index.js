#!/usr/bin/env node

// @flow

import { findBreakingChanges, buildSchema, printSchema } from 'graphql';
import program from 'commander';
import SignedSource from '@kiwicom/signed-source';
import fs from 'fs';

import schema from '../../../Schema';
import { printChanges, note, success, warning, error } from './Printer';

program
  .option('--allow-breaking-changes')
  .option('--snapshot <path>')
  .parse(process.argv);

const flagAllowBreakingChanges = program.allowBreakingChanges ?? false;
const snapshotLocation =
  program.snapshot ??
  (() => {
    throw new Error(
      'You have to specify --snapshot location in order to run this command.',
    );
  })();

const breakingChangeMarkerStart = '<BREAKING-CHANGES-LOG>';
const breakingChangeMarkerEnd = '</BREAKING-CHANGES-LOG>';

const breakingChangeBlockRegExp = new RegExp(
  '# ' + breakingChangeMarkerStart + '([\\s\\S]+)# ' + breakingChangeMarkerEnd,
);

const terminate = (cb?: () => void = () => {}) => {
  cb();
  process.exit(1);
};

const oldSchema = buildSchema(fs.readFileSync(snapshotLocation).toString());
const newSchema = schema;

let newLog = null;

const changes = findBreakingChanges(oldSchema, newSchema);
if (changes.length > 0) {
  printChanges(changes);

  newLog = changes.reduce(
    (acc, curVal) =>
      acc + '#  ' + curVal.type + ': ' + curVal.description + '\n',
    '',
  );

  if (flagAllowBreakingChanges === false) {
    terminate();
  }
}

const oldSnapshot = fs.readFileSync(snapshotLocation, { encoding: 'utf-8' });
const match = oldSnapshot.match(breakingChangeBlockRegExp);
let breakingChangesLog = match === null ? '' : match[1];

if (newLog) {
  breakingChangesLog += newLog;
}

const breakingChangesBlock =
  '# ' +
  breakingChangeMarkerStart +
  breakingChangesLog +
  '# ' +
  breakingChangeMarkerEnd;

const newSnapshot = SignedSource.signFile(
  `# ${SignedSource.getSigningToken()}\n\n${breakingChangesBlock}\n\n${printSchema(
    schema,
  )}`,
);

if (!SignedSource.verifySignature(oldSnapshot)) {
  terminate(
    error(
      '\nManual changes of GraphQL snapshot detected. Please do not update GraphQL snapshot manually. This file is being autogenerated.\n',
    ),
  );
}

if (newSnapshot !== oldSnapshot) {
  warning('\nGraphQL schema snapshot IS OUTDATED! (updating automatically)');
  fs.writeFileSync(snapshotLocation, newSnapshot);

  // this is also considered failure so CI will fail (must be committed manually)
  terminate(
    note(
      'Snapshot of the GraphQL schema successfully created! Now please commit it...\n',
    ),
  );
} else {
  success(
    '\nCongratulations! NO BREAKING CHANGES or OUTDATED SCHEMA. Good job!\n',
  );
}
